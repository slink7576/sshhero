/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class CommandClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44379";
    }

    executeCustom(command: ExecuteCustomCommand): Observable<ExecuteCustomCommandViewModel | null> {
        let url_ = this.baseUrl + "/api/Command/ExecuteCustom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExecuteCustom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExecuteCustom(<any>response_);
                } catch (e) {
                    return <Observable<ExecuteCustomCommandViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExecuteCustomCommandViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processExecuteCustom(response: HttpResponseBase): Observable<ExecuteCustomCommandViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExecuteCustomCommandViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExecuteCustomCommandViewModel | null>(<any>null);
    }

    reboot(command: RebootCommand): Observable<RebootViewModel | null> {
        let url_ = this.baseUrl + "/api/Command/Reboot";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReboot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReboot(<any>response_);
                } catch (e) {
                    return <Observable<RebootViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RebootViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processReboot(response: HttpResponseBase): Observable<RebootViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RebootViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RebootViewModel | null>(<any>null);
    }

    checkConnection(command: CheckConnectionCommand): Observable<CheckConnectionViewModel | null> {
        let url_ = this.baseUrl + "/api/Command/CheckConnection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckConnection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckConnection(<any>response_);
                } catch (e) {
                    return <Observable<CheckConnectionViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CheckConnectionViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processCheckConnection(response: HttpResponseBase): Observable<CheckConnectionViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CheckConnectionViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CheckConnectionViewModel | null>(<any>null);
    }

    getSystemInfo(command: GetSystemInfoCommand): Observable<SystemInfoViewModel | null> {
        let url_ = this.baseUrl + "/api/Command/GetSystemInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSystemInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSystemInfo(<any>response_);
                } catch (e) {
                    return <Observable<SystemInfoViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<SystemInfoViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetSystemInfo(response: HttpResponseBase): Observable<SystemInfoViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SystemInfoViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SystemInfoViewModel | null>(<any>null);
    }

    getAllProcesses(command: GetAllProcessesCommand): Observable<ProcessesListViewModel | null> {
        let url_ = this.baseUrl + "/api/Command/GetAllProcesses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllProcesses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllProcesses(<any>response_);
                } catch (e) {
                    return <Observable<ProcessesListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessesListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllProcesses(response: HttpResponseBase): Observable<ProcessesListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProcessesListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessesListViewModel | null>(<any>null);
    }

    killProcess(command: KillProcessCommand): Observable<KillProcessViewModel | null> {
        let url_ = this.baseUrl + "/api/Command/KillProcess";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processKillProcess(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processKillProcess(<any>response_);
                } catch (e) {
                    return <Observable<KillProcessViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<KillProcessViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processKillProcess(response: HttpResponseBase): Observable<KillProcessViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? KillProcessViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<KillProcessViewModel | null>(<any>null);
    }

    getFiles(command: GetFilesCommand): Observable<GetFilesViewModel | null> {
        let url_ = this.baseUrl + "/api/Command/GetFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFiles(<any>response_);
                } catch (e) {
                    return <Observable<GetFilesViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetFilesViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFiles(response: HttpResponseBase): Observable<GetFilesViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetFilesViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetFilesViewModel | null>(<any>null);
    }
}

export abstract class BaseViewModel implements IBaseViewModel {
    isError!: boolean;
    error?: string | undefined;

    constructor(data?: IBaseViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isError = data["isError"];
            this.error = data["error"];
        }
    }

    static fromJS(data: any): BaseViewModel {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseViewModel' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["error"] = this.error;
        return data; 
    }
}

export interface IBaseViewModel {
    isError: boolean;
    error?: string | undefined;
}

export class ExecuteCustomCommandViewModel extends BaseViewModel implements IExecuteCustomCommandViewModel {
    result?: string | undefined;

    constructor(data?: IExecuteCustomCommandViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.result = data["result"];
        }
    }

    static fromJS(data: any): ExecuteCustomCommandViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExecuteCustomCommandViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        super.toJSON(data);
        return data; 
    }
}

export interface IExecuteCustomCommandViewModel extends IBaseViewModel {
    result?: string | undefined;
}

export abstract class BaseCommand implements IBaseCommand {
    credentials?: Credentials | undefined;

    constructor(data?: IBaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.credentials = data["credentials"] ? Credentials.fromJS(data["credentials"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BaseCommand {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseCommand' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["credentials"] = this.credentials ? this.credentials.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBaseCommand {
    credentials?: Credentials | undefined;
}

export class ExecuteCustomCommand extends BaseCommand implements IExecuteCustomCommand {
    command?: string | undefined;
    isSudo!: boolean;

    constructor(data?: IExecuteCustomCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.command = data["command"];
            this.isSudo = data["isSudo"];
        }
    }

    static fromJS(data: any): ExecuteCustomCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ExecuteCustomCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["command"] = this.command;
        data["isSudo"] = this.isSudo;
        super.toJSON(data);
        return data; 
    }
}

export interface IExecuteCustomCommand extends IBaseCommand {
    command?: string | undefined;
    isSudo: boolean;
}

export class Credentials implements ICredentials {
    hostname?: string | undefined;
    password?: string | undefined;
    login?: string | undefined;

    constructor(data?: ICredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hostname = data["hostname"];
            this.password = data["password"];
            this.login = data["login"];
        }
    }

    static fromJS(data: any): Credentials {
        data = typeof data === 'object' ? data : {};
        let result = new Credentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hostname"] = this.hostname;
        data["password"] = this.password;
        data["login"] = this.login;
        return data; 
    }
}

export interface ICredentials {
    hostname?: string | undefined;
    password?: string | undefined;
    login?: string | undefined;
}

export class RebootViewModel extends BaseViewModel implements IRebootViewModel {

    constructor(data?: IRebootViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): RebootViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RebootViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IRebootViewModel extends IBaseViewModel {
}

export class RebootCommand extends BaseCommand implements IRebootCommand {

    constructor(data?: IRebootCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): RebootCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RebootCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IRebootCommand extends IBaseCommand {
}

export class CheckConnectionViewModel extends BaseViewModel implements ICheckConnectionViewModel {
    isAlive!: boolean;

    constructor(data?: ICheckConnectionViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.isAlive = data["isAlive"];
        }
    }

    static fromJS(data: any): CheckConnectionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CheckConnectionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAlive"] = this.isAlive;
        super.toJSON(data);
        return data; 
    }
}

export interface ICheckConnectionViewModel extends IBaseViewModel {
    isAlive: boolean;
}

export class CheckConnectionCommand extends BaseCommand implements ICheckConnectionCommand {

    constructor(data?: ICheckConnectionCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): CheckConnectionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CheckConnectionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICheckConnectionCommand extends IBaseCommand {
}

export class SystemInfoViewModel extends BaseViewModel implements ISystemInfoViewModel {
    os?: string | undefined;

    constructor(data?: ISystemInfoViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.os = data["os"];
        }
    }

    static fromJS(data: any): SystemInfoViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SystemInfoViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["os"] = this.os;
        super.toJSON(data);
        return data; 
    }
}

export interface ISystemInfoViewModel extends IBaseViewModel {
    os?: string | undefined;
}

export class GetSystemInfoCommand extends BaseCommand implements IGetSystemInfoCommand {

    constructor(data?: IGetSystemInfoCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): GetSystemInfoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GetSystemInfoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetSystemInfoCommand extends IBaseCommand {
}

export class ProcessesListViewModel extends BaseViewModel implements IProcessesListViewModel {
    processes?: ProcessInfo[] | undefined;

    constructor(data?: IProcessesListViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["processes"] && data["processes"].constructor === Array) {
                this.processes = [] as any;
                for (let item of data["processes"])
                    this.processes!.push(ProcessInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessesListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessesListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.processes && this.processes.constructor === Array) {
            data["processes"] = [];
            for (let item of this.processes)
                data["processes"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessesListViewModel extends IBaseViewModel {
    processes?: ProcessInfo[] | undefined;
}

export class ProcessInfo implements IProcessInfo {
    name?: string | undefined;
    cpu!: number;
    memory!: number;
    id!: number;

    constructor(data?: IProcessInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.cpu = data["cpu"];
            this.memory = data["memory"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProcessInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["cpu"] = this.cpu;
        data["memory"] = this.memory;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProcessInfo {
    name?: string | undefined;
    cpu: number;
    memory: number;
    id: number;
}

export class GetAllProcessesCommand extends BaseCommand implements IGetAllProcessesCommand {

    constructor(data?: IGetAllProcessesCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): GetAllProcessesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllProcessesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllProcessesCommand extends IBaseCommand {
}

export class KillProcessViewModel extends BaseViewModel implements IKillProcessViewModel {

    constructor(data?: IKillProcessViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): KillProcessViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new KillProcessViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IKillProcessViewModel extends IBaseViewModel {
}

export class KillProcessCommand extends BaseCommand implements IKillProcessCommand {
    id!: number;

    constructor(data?: IKillProcessCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): KillProcessCommand {
        data = typeof data === 'object' ? data : {};
        let result = new KillProcessCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IKillProcessCommand extends IBaseCommand {
    id: number;
}

export class GetFilesViewModel extends BaseViewModel implements IGetFilesViewModel {
    nodes?: FileNode[] | undefined;
    path?: string | undefined;

    constructor(data?: IGetFilesViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["nodes"] && data["nodes"].constructor === Array) {
                this.nodes = [] as any;
                for (let item of data["nodes"])
                    this.nodes!.push(FileNode.fromJS(item));
            }
            this.path = data["path"];
        }
    }

    static fromJS(data: any): GetFilesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetFilesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.nodes && this.nodes.constructor === Array) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        data["path"] = this.path;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetFilesViewModel extends IBaseViewModel {
    nodes?: FileNode[] | undefined;
    path?: string | undefined;
}

export class FileNode implements IFileNode {
    name?: string | undefined;
    isFile!: boolean;

    constructor(data?: IFileNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.isFile = data["isFile"];
        }
    }

    static fromJS(data: any): FileNode {
        data = typeof data === 'object' ? data : {};
        let result = new FileNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isFile"] = this.isFile;
        return data; 
    }
}

export interface IFileNode {
    name?: string | undefined;
    isFile: boolean;
}

export class GetFilesCommand extends BaseCommand implements IGetFilesCommand {
    path?: string | undefined;

    constructor(data?: IGetFilesCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.path = data["path"];
        }
    }

    static fromJS(data: any): GetFilesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GetFilesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetFilesCommand extends IBaseCommand {
    path?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}