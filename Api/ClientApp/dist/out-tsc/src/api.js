/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export var API_BASE_URL = new InjectionToken('API_BASE_URL');
var CommandClient = /** @class */ (function () {
    function CommandClient(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44379";
    }
    CommandClient.prototype.executeCustom = function (command) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Command/ExecuteCustom";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(command);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processExecuteCustom(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processExecuteCustom(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CommandClient.prototype.processExecuteCustom = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExecuteCustomCommandViewModel.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CommandClient.prototype.reboot = function (command) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Command/Reboot";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(command);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processReboot(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processReboot(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CommandClient.prototype.processReboot = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CommandClient.prototype.checkConnection = function (command) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Command/CheckConnection";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(command);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processCheckConnection(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCheckConnection(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CommandClient.prototype.processCheckConnection = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CheckConnectionViewModel.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CommandClient.prototype.getSystemInfo = function (command) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Command/GetSystemInfo";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(command);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetSystemInfo(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetSystemInfo(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CommandClient.prototype.processGetSystemInfo = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SystemInfoViewModel.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CommandClient.prototype.getAllProcesses = function (command) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Command/GetAllProcesses";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(command);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetAllProcesses(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetAllProcesses(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CommandClient.prototype.processGetAllProcesses = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ProcessesListViewModel.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CommandClient = __decorate([
        Injectable(),
        __param(0, Inject(HttpClient)), __param(1, Optional()), __param(1, Inject(API_BASE_URL)),
        __metadata("design:paramtypes", [HttpClient, String])
    ], CommandClient);
    return CommandClient;
}());
export { CommandClient };
var ExecuteCustomCommandViewModel = /** @class */ (function () {
    function ExecuteCustomCommandViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExecuteCustomCommandViewModel.prototype.init = function (data) {
        if (data) {
            this.isError = data["isError"];
            this.result = data["result"];
            this.error = data["error"];
        }
    };
    ExecuteCustomCommandViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExecuteCustomCommandViewModel();
        result.init(data);
        return result;
    };
    ExecuteCustomCommandViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["result"] = this.result;
        data["error"] = this.error;
        return data;
    };
    return ExecuteCustomCommandViewModel;
}());
export { ExecuteCustomCommandViewModel };
var BaseCommand = /** @class */ (function () {
    function BaseCommand(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BaseCommand.prototype.init = function (data) {
        if (data) {
            this.credentials = data["credentials"] ? Credentials.fromJS(data["credentials"]) : undefined;
        }
    };
    BaseCommand.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseCommand' cannot be instantiated.");
    };
    BaseCommand.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["credentials"] = this.credentials ? this.credentials.toJSON() : undefined;
        return data;
    };
    return BaseCommand;
}());
export { BaseCommand };
var ExecuteCustomCommand = /** @class */ (function (_super) {
    __extends(ExecuteCustomCommand, _super);
    function ExecuteCustomCommand(data) {
        return _super.call(this, data) || this;
    }
    ExecuteCustomCommand.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
        if (data) {
            this.command = data["command"];
            this.isSudo = data["isSudo"];
        }
    };
    ExecuteCustomCommand.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExecuteCustomCommand();
        result.init(data);
        return result;
    };
    ExecuteCustomCommand.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["command"] = this.command;
        data["isSudo"] = this.isSudo;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return ExecuteCustomCommand;
}(BaseCommand));
export { ExecuteCustomCommand };
var Credentials = /** @class */ (function () {
    function Credentials(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Credentials.prototype.init = function (data) {
        if (data) {
            this.hostname = data["hostname"];
            this.password = data["password"];
            this.login = data["login"];
        }
    };
    Credentials.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Credentials();
        result.init(data);
        return result;
    };
    Credentials.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["hostname"] = this.hostname;
        data["password"] = this.password;
        data["login"] = this.login;
        return data;
    };
    return Credentials;
}());
export { Credentials };
var RebootCommand = /** @class */ (function (_super) {
    __extends(RebootCommand, _super);
    function RebootCommand(data) {
        return _super.call(this, data) || this;
    }
    RebootCommand.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
    };
    RebootCommand.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RebootCommand();
        result.init(data);
        return result;
    };
    RebootCommand.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return RebootCommand;
}(BaseCommand));
export { RebootCommand };
var CheckConnectionViewModel = /** @class */ (function () {
    function CheckConnectionViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CheckConnectionViewModel.prototype.init = function (data) {
        if (data) {
            this.isAlive = data["isAlive"];
        }
    };
    CheckConnectionViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CheckConnectionViewModel();
        result.init(data);
        return result;
    };
    CheckConnectionViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isAlive"] = this.isAlive;
        return data;
    };
    return CheckConnectionViewModel;
}());
export { CheckConnectionViewModel };
var CheckConnectionCommand = /** @class */ (function (_super) {
    __extends(CheckConnectionCommand, _super);
    function CheckConnectionCommand(data) {
        return _super.call(this, data) || this;
    }
    CheckConnectionCommand.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
    };
    CheckConnectionCommand.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CheckConnectionCommand();
        result.init(data);
        return result;
    };
    CheckConnectionCommand.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return CheckConnectionCommand;
}(BaseCommand));
export { CheckConnectionCommand };
var SystemInfoViewModel = /** @class */ (function () {
    function SystemInfoViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SystemInfoViewModel.prototype.init = function (data) {
        if (data) {
            this.os = data["os"];
        }
    };
    SystemInfoViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SystemInfoViewModel();
        result.init(data);
        return result;
    };
    SystemInfoViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["os"] = this.os;
        return data;
    };
    return SystemInfoViewModel;
}());
export { SystemInfoViewModel };
var GetSystemInfoCommand = /** @class */ (function (_super) {
    __extends(GetSystemInfoCommand, _super);
    function GetSystemInfoCommand(data) {
        return _super.call(this, data) || this;
    }
    GetSystemInfoCommand.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
    };
    GetSystemInfoCommand.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetSystemInfoCommand();
        result.init(data);
        return result;
    };
    GetSystemInfoCommand.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return GetSystemInfoCommand;
}(BaseCommand));
export { GetSystemInfoCommand };
var ProcessesListViewModel = /** @class */ (function () {
    function ProcessesListViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ProcessesListViewModel.prototype.init = function (data) {
        if (data) {
            if (data["processes"] && data["processes"].constructor === Array) {
                this.processes = [];
                for (var _i = 0, _a = data["processes"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.processes.push(ProcessInfo.fromJS(item));
                }
            }
        }
    };
    ProcessesListViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ProcessesListViewModel();
        result.init(data);
        return result;
    };
    ProcessesListViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.processes && this.processes.constructor === Array) {
            data["processes"] = [];
            for (var _i = 0, _a = this.processes; _i < _a.length; _i++) {
                var item = _a[_i];
                data["processes"].push(item.toJSON());
            }
        }
        return data;
    };
    return ProcessesListViewModel;
}());
export { ProcessesListViewModel };
var ProcessInfo = /** @class */ (function () {
    function ProcessInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ProcessInfo.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.cpu = data["cpu"];
            this.memory = data["memory"];
            this.id = data["id"];
        }
    };
    ProcessInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ProcessInfo();
        result.init(data);
        return result;
    };
    ProcessInfo.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["cpu"] = this.cpu;
        data["memory"] = this.memory;
        data["id"] = this.id;
        return data;
    };
    return ProcessInfo;
}());
export { ProcessInfo };
var GetAllProcessesCommand = /** @class */ (function (_super) {
    __extends(GetAllProcessesCommand, _super);
    function GetAllProcessesCommand(data) {
        return _super.call(this, data) || this;
    }
    GetAllProcessesCommand.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
    };
    GetAllProcessesCommand.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetAllProcessesCommand();
        result.init(data);
        return result;
    };
    GetAllProcessesCommand.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    return GetAllProcessesCommand;
}(BaseCommand));
export { GetAllProcessesCommand };
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
export { SwaggerException };
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new Observable(function (observer) {
        if (!blob) {
            observer.next("");
            observer.complete();
        }
        else {
            var reader = new FileReader();
            reader.onload = function (event) {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
//# sourceMappingURL=api.js.map